-- public.geography_columns source ? 자동으로 생성되나?

-- CREATE OR REPLACE VIEW public.geography_columns
-- AS SELECT current_database() AS f_table_catalog,
--     n.nspname AS f_table_schema,
--     c.relname AS f_table_name,
--     a.attname AS f_geography_column,
--     postgis_typmod_dims(a.atttypmod) AS coord_dimension,
--     postgis_typmod_srid(a.atttypmod) AS srid,
--     postgis_typmod_type(a.atttypmod) AS type
--    FROM pg_class c,
--     pg_attribute a,
--     pg_type t,
--     pg_namespace n
--   WHERE t.typname = 'geography'::name AND a.attisdropped = false AND a.atttypid = t.oid AND a.attrelid = c.oid AND c.relnamespace = n.oid AND (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char", 'p'::"char"])) AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text);
-- 

-- public.geometry_columns source

--CREATE OR REPLACE VIEW public.geometry_columns ? 자동으로 생성되나?
--AS SELECT current_database()::character varying(256) AS f_table_catalog,
--    n.nspname AS f_table_schema,
--    c.relname AS f_table_name,
--    a.attname AS f_geometry_column,
--    COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension,
--    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid,
--    replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text)::character varying(30) AS type
--   FROM pg_class c
--     JOIN pg_attribute a ON a.attrelid = c.oid AND NOT a.attisdropped
--     JOIN pg_namespace n ON c.relnamespace = n.oid
--     JOIN pg_type t ON a.atttypid = t.oid
--     LEFT JOIN ( SELECT s.connamespace,
--            s.conrelid,
--            s.conkey,
--            replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type
--           FROM ( SELECT pg_constraint.connamespace,
--                    pg_constraint.conrelid,
--                    pg_constraint.conkey,
--                    pg_get_constraintdef(pg_constraint.oid) AS consrc
--                   FROM pg_constraint) s
--          WHERE s.consrc ~~* '%geometrytype(% = %'::text) st ON st.connamespace = n.oid AND st.conrelid = c.oid AND (a.attnum = ANY (st.conkey))
--     LEFT JOIN ( SELECT s.connamespace,
--            s.conrelid,
--            s.conkey,
--            replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text)::integer AS ndims
--           FROM ( SELECT pg_constraint.connamespace,
--                    pg_constraint.conrelid,
--                    pg_constraint.conkey,
--                    pg_get_constraintdef(pg_constraint.oid) AS consrc
--                   FROM pg_constraint) s
--          WHERE s.consrc ~~* '%ndims(% = %'::text) sn ON sn.connamespace = n.oid AND sn.conrelid = c.oid AND (a.attnum = ANY (sn.conkey))
--     LEFT JOIN ( SELECT s.connamespace,
--            s.conrelid,
--            s.conkey,
--            replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text)::integer AS srid
--           FROM ( SELECT pg_constraint.connamespace,
--                    pg_constraint.conrelid,
--                    pg_constraint.conkey,
--                    pg_get_constraintdef(pg_constraint.oid) AS consrc
--                   FROM pg_constraint) s
--          WHERE s.consrc ~~* '%srid(% = %'::text) sr ON sr.connamespace = n.oid AND sr.conrelid = c.oid AND (a.attnum = ANY (sr.conkey))
--  WHERE (c.relkind = ANY (ARRAY['r'::"char", 'v'::"char", 'm'::"char", 'f'::"char", 'p'::"char"])) AND NOT c.relname = 'raster_columns'::name AND t.typname = 'geometry'::name AND NOT pg_is_other_temp_schema(c.relnamespace) AND has_table_privilege(c.oid, 'SELECT'::text);
--

-- public.pg_stat_statements source

CREATE OR REPLACE VIEW public.pg_stat_statements
AS SELECT pg_stat_statements.userid,
    pg_stat_statements.dbid,
    pg_stat_statements.toplevel,
    pg_stat_statements.queryid,
    pg_stat_statements.query,
    pg_stat_statements.plans,
    pg_stat_statements.total_plan_time,
    pg_stat_statements.min_plan_time,
    pg_stat_statements.max_plan_time,
    pg_stat_statements.mean_plan_time,
    pg_stat_statements.stddev_plan_time,
    pg_stat_statements.calls,
    pg_stat_statements.total_exec_time,
    pg_stat_statements.min_exec_time,
    pg_stat_statements.max_exec_time,
    pg_stat_statements.mean_exec_time,
    pg_stat_statements.stddev_exec_time,
    pg_stat_statements.rows,
    pg_stat_statements.shared_blks_hit,
    pg_stat_statements.shared_blks_read,
    pg_stat_statements.shared_blks_dirtied,
    pg_stat_statements.shared_blks_written,
    pg_stat_statements.local_blks_hit,
    pg_stat_statements.local_blks_read,
    pg_stat_statements.local_blks_dirtied,
    pg_stat_statements.local_blks_written,
    pg_stat_statements.temp_blks_read,
    pg_stat_statements.temp_blks_written,
    pg_stat_statements.blk_read_time,
    pg_stat_statements.blk_write_time,
    pg_stat_statements.temp_blk_read_time,
    pg_stat_statements.temp_blk_write_time,
    pg_stat_statements.wal_records,
    pg_stat_statements.wal_fpi,
    pg_stat_statements.wal_bytes,
    pg_stat_statements.jit_functions,
    pg_stat_statements.jit_generation_time,
    pg_stat_statements.jit_inlining_count,
    pg_stat_statements.jit_inlining_time,
    pg_stat_statements.jit_optimization_count,
    pg_stat_statements.jit_optimization_time,
    pg_stat_statements.jit_emission_count,
    pg_stat_statements.jit_emission_time
   FROM pg_stat_statements(true) pg_stat_statements(userid, dbid, toplevel, queryid, query, plans, total_plan_time, min_plan_time, max_plan_time, mean_plan_time, stddev_plan_time, calls, total_exec_time, min_exec_time, max_exec_time, mean_exec_time, stddev_exec_time, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time, blk_write_time, temp_blk_read_time, temp_blk_write_time, wal_records, wal_fpi, wal_bytes, jit_functions, jit_generation_time, jit_inlining_count, jit_inlining_time, jit_optimization_count, jit_optimization_time, jit_emission_count, jit_emission_time);


-- public.pg_stat_statements_info source

CREATE OR REPLACE VIEW public.pg_stat_statements_info
AS SELECT pg_stat_statements_info.dealloc,
    pg_stat_statements_info.stats_reset
   FROM pg_stat_statements_info() pg_stat_statements_info(dealloc, stats_reset);